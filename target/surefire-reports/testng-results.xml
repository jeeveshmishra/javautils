<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="91" passed="91">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="492" started-at="2017-01-28T19:30:16Z" finished-at="2017-01-28T19:30:16Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="492" started-at="2017-01-28T19:30:16Z" finished-at="2017-01-28T19:30:16Z">
      <class name="my.utils.SequenceTest">
        <test-method status="PASS" signature="test_filter()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_filter" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_filter -->
        <test-method status="PASS" signature="test_filterNot()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_filterNot" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_filterNot -->
        <test-method status="PASS" signature="test_firstOrDefault_byCondition()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_firstOrDefault_byCondition" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_firstOrDefault_byCondition -->
        <test-method status="PASS" signature="test_first_byCondition()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_first_byCondition" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_first_byCondition -->
        <test-method status="PASS" signature="test_last()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_last" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_last -->
        <test-method status="PASS" signature="test_lastOrDefault_whenSourceIsEmpty()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_lastOrDefault_whenSourceIsEmpty" duration-ms="2" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_lastOrDefault_whenSourceIsEmpty -->
        <test-method status="PASS" signature="test_lastOrDefault()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_lastOrDefault" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_lastOrDefault -->
        <test-method status="PASS" signature="test_get()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_get" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_get -->
        <test-method status="PASS" signature="test_map()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_map" duration-ms="6" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_map -->
        <test-method status="PASS" signature="test_max()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_max" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max -->
        <test-method status="PASS" signature="test_max_ofInnerValue()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_max_ofInnerValue" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_max_ofInnerValue -->
        <test-method status="PASS" signature="test_min_ofInnerValue()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_min_ofInnerValue" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min_ofInnerValue -->
        <test-method status="PASS" signature="test_min()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_min" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_min -->
        <test-method status="PASS" signature="test_removeNullValues()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_removeNullValues" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_removeNullValues -->
        <test-method status="PASS" signature="test_remove()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_remove" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_remove -->
        <test-method status="PASS" signature="test_remove_whenFilterArrayOfValues()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_remove_whenFilterArrayOfValues" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_remove_whenFilterArrayOfValues -->
        <test-method status="PASS" signature="test_remove_whenSeveralValues()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_remove_whenSeveralValues" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_remove_whenSeveralValues -->
        <test-method status="PASS" signature="test_sequence_add()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_add" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_add -->
        <test-method status="PASS" signature="test_sequence_isEmpty_whenNullSource()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_isEmpty_whenNullSource" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_isEmpty_whenNullSource -->
        <test-method status="PASS" signature="test_sequence_isEmpty_whenSourceIsNotEmpty()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_isEmpty_whenSourceIsNotEmpty" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_isEmpty_whenSourceIsNotEmpty -->
        <test-method status="PASS" signature="test_sequence_ofArray_whenSourceIsNull()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_ofArray_whenSourceIsNull" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_ofArray_whenSourceIsNull -->
        <test-method status="PASS" signature="test_sequence_isEmpty_whenSourceIsEmpty()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_isEmpty_whenSourceIsEmpty" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_isEmpty_whenSourceIsEmpty -->
        <test-method status="PASS" signature="test_sequence_merge_collection()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_merge_collection" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_merge_collection -->
        <test-method status="PASS" signature="test_sequence_merge_array()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_merge_array" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_merge_array -->
        <test-method status="PASS" signature="test_sequence_ofArray()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_ofArray" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_ofArray -->
        <test-method status="PASS" signature="test_sequence_remove()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_remove" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_remove -->
        <test-method status="PASS" signature="test_sequence_removeByIndex()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_removeByIndex" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_removeByIndex -->
        <test-method status="PASS" signature="test_sequence_ofList()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_ofList" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_ofList -->
        <test-method status="PASS" signature="test_sequence_removeByArray()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_removeByArray" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_removeByArray -->
        <test-method status="PASS" signature="test_sequence_ofList_whenSourceIsNull()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_ofList_whenSourceIsNull" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_ofList_whenSourceIsNull -->
        <test-method status="PASS" signature="test_sequence_removeByEmptyArray()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_removeByEmptyArray" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_removeByEmptyArray -->
        <test-method status="PASS" signature="test_sequence_ofValues()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_ofValues" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_ofValues -->
        <test-method status="PASS" signature="test_size()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_size" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_size -->
        <test-method status="PASS" signature="test_sort()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sort" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort -->
        <test-method status="PASS" signature="test_sequence_single()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sequence_single" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sequence_single -->
        <test-method status="PASS" signature="test_sortBy_desc()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sortBy_desc" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sortBy_desc -->
        <test-method status="PASS" signature="test_sortBy()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sortBy" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sortBy -->
        <test-method status="PASS" signature="test_take()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_take" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_take -->
        <test-method status="PASS" signature="test_take_fromWithSize()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_take_fromWithSize" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_take_fromWithSize -->
        <test-method status="PASS" signature="test_sort_desc()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_sort_desc" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_sort_desc -->
        <test-method status="PASS" signature="test_take_whenSizeIsMoreThenSource()[pri:0, instance:my.utils.SequenceTest@6fadae5d]" name="test_take_whenSizeIsMoreThenSource" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_take_whenSizeIsMoreThenSource -->
      </class> <!-- my.utils.SequenceTest -->
      <class name="my.utils.FunctionalMapTest">
        <test-method status="PASS" signature="test_filter()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_filter" duration-ms="2" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_filter -->
        <test-method status="PASS" signature="test_filterNot()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_filterNot" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_filterNot -->
        <test-method status="PASS" signature="test_foreach_whenNoException()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_foreach_whenNoException" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_foreach_whenNoException -->
        <test-method status="PASS" signature="test_foreach_whenThrowException()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_foreach_whenThrowException" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[java.lang.Exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: java.lang.Exception
	at my.utils.ThrowableConsumer.lambda$toBiConsumer$1(ThrowableConsumer.java:29)
	at java.util.HashMap.forEach(HashMap.java:1288)
	at my.utils.FunctionalMap.forEach(FunctionalMap.java:96)
	at my.utils.FunctionalMapTest.test_foreach_whenThrowException(FunctionalMapTest.java:173)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.Exception
	at my.utils.FunctionalMapTest.handle(FunctionalMapTest.java:177)
	at my.utils.ThrowableConsumer.lambda$toBiConsumer$1(ThrowableConsumer.java:27)
	... 37 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_foreach_whenThrowException -->
        <test-method status="PASS" signature="test_merge()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_merge" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_merge -->
        <test-method status="PASS" signature="test_merge_whenSourceIsNull()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_merge_whenSourceIsNull" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_merge_whenSourceIsNull -->
        <test-method status="PASS" signature="test_put()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_put" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_put -->
        <test-method status="PASS" signature="test_of_entrySet()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_of_entrySet" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_entrySet -->
        <test-method status="PASS" signature="test_of_map()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_of_map" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_map -->
        <test-method status="PASS" signature="test_remove()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_remove" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_remove -->
        <test-method status="PASS" signature="test_values()[pri:0, instance:my.utils.FunctionalMapTest@7a0ac6e3]" name="test_values" duration-ms="2" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_values -->
      </class> <!-- my.utils.FunctionalMapTest -->
      <class name="my.utils.DateTimeTest">
        <test-method status="PASS" signature="test_Parse_Invalid_Date()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_Parse_Invalid_Date" duration-ms="17" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[java.text.ParseException: Unparseable date: "Any String"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: java.text.ParseException: Unparseable date: "Any String"
	at my.utils.DateTime.parse(DateTime.java:123)
	at my.utils.DateTime.of(DateTime.java:39)
	at my.utils.DateTimeTest.test_Parse_Invalid_Date(DateTimeTest.java:99)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.text.ParseException: Unparseable date: "Any String"
	at java.text.DateFormat.parse(DateFormat.java:366)
	at my.utils.DateTime.parse(DateTime.java:121)
	... 36 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Parse_Invalid_Date -->
        <test-method status="PASS" signature="test_copy_DateTime()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_copy_DateTime" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_copy_DateTime -->
        <test-method status="PASS" signature="test_Parse_Invalid_Format()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_Parse_Invalid_Format" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[java.lang.IllegalArgumentException: Illegal pattern character 'I']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: java.lang.IllegalArgumentException: Illegal pattern character 'I'
	at my.utils.DateTime.parse(DateTime.java:123)
	at my.utils.DateTime.of(DateTime.java:51)
	at my.utils.DateTimeTest.test_Parse_Invalid_Format(DateTimeTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.lang.IllegalArgumentException: Illegal pattern character 'I'
	at java.text.SimpleDateFormat.compile(SimpleDateFormat.java:826)
	at java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:634)
	at java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:605)
	at java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:580)
	at my.utils.DateTime.toDateFormat(DateTime.java:84)
	at my.utils.DateTime.parse(DateTime.java:121)
	... 36 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_Parse_Invalid_Format -->
        <test-method status="PASS" signature="test_format()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_format" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_format -->
        <test-method status="PASS" signature="test_format_enum()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_format_enum" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_format_enum -->
        <test-method status="PASS" signature="test_of_Date()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_of_Date" duration-ms="52" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_Date -->
        <test-method status="PASS" signature="test_of_dateFormat_toXmlGregorianCalendar()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_of_dateFormat_toXmlGregorianCalendar" duration-ms="3" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_dateFormat_toXmlGregorianCalendar -->
        <test-method status="PASS" signature="test_of_Instant()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_of_Instant" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_Instant -->
        <test-method status="PASS" signature="test_of_dateTime_toXmlGregorianCalendar()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_of_dateTime_toXmlGregorianCalendar" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_of_dateTime_toXmlGregorianCalendar -->
        <test-method status="PASS" signature="test_toString()[pri:0, instance:my.utils.DateTimeTest@59a6e353]" name="test_toString" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toString -->
      </class> <!-- my.utils.DateTimeTest -->
      <class name="my.utils.CollectionUtilsTest">
        <test-method status="PASS" signature="test_difference()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_difference" duration-ms="8" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_difference -->
        <test-method status="PASS" signature="test_eliminateDuplicates()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_eliminateDuplicates" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_eliminateDuplicates -->
        <test-method status="PASS" signature="test_getSingleOrDefault_whenListContainsMultipleElements_willThrowException()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_getSingleOrDefault_whenListContainsMultipleElements_willThrowException" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getSingleOrDefault_whenListContainsMultipleElements_willThrowException -->
        <test-method status="PASS" signature="test_getSingleOrDefault_whenListIsNull_willThrowException()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_getSingleOrDefault_whenListIsNull_willThrowException" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getSingleOrDefault_whenListIsNull_willThrowException -->
        <test-method status="PASS" signature="test_getSingle_whenListContainsMultipleElements_willThrowException()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_getSingle_whenListContainsMultipleElements_willThrowException" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Collection contains multiple elements]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Collection contains multiple elements
	at my.utils.CollectionUtils.getSingle(CollectionUtils.java:106)
	at my.utils.CollectionUtilsTest.test_getSingle_whenListContainsMultipleElements_willThrowException(CollectionUtilsTest.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getSingle_whenListContainsMultipleElements_willThrowException -->
        <test-method status="PASS" signature="test_getSingle_whenSingleElement_willReturnElement()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_getSingle_whenSingleElement_willReturnElement" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getSingle_whenSingleElement_willReturnElement -->
        <test-method status="PASS" signature="test_getSingle_whenListIsNull_willThrowException()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_getSingle_whenListIsNull_willThrowException" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Collection is null or empty]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Collection is null or empty
	at my.utils.CollectionUtils.getSingle(CollectionUtils.java:101)
	at my.utils.CollectionUtilsTest.test_getSingle_whenListIsNull_willThrowException(CollectionUtilsTest.java:108)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getSingle_whenListIsNull_willThrowException -->
        <test-method status="PASS" signature="test_isNullOrEmpty_whenListIsNull()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_isNullOrEmpty_whenListIsNull" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_isNullOrEmpty_whenListIsNull -->
        <test-method status="PASS" signature="test_isNullOrEmpty_whenListIsNotNullOrEmpty()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_isNullOrEmpty_whenListIsNotNullOrEmpty" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_isNullOrEmpty_whenListIsNotNullOrEmpty -->
        <test-method status="PASS" signature="test_isNullOrEmpty_whenListIsEmpty()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_isNullOrEmpty_whenListIsEmpty" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_isNullOrEmpty_whenListIsEmpty -->
        <test-method status="PASS" signature="test_toArray()[pri:0, instance:my.utils.CollectionUtilsTest@19dfb72a]" name="test_toArray" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_toArray -->
      </class> <!-- my.utils.CollectionUtilsTest -->
      <class name="my.utils.CryptographyUtilsTest">
        <test-method status="PASS" signature="testCryptography()[pri:0, instance:my.utils.CryptographyUtilsTest@3d24753a]" name="testCryptography" duration-ms="72" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCryptography -->
        <test-method status="PASS" signature="testCryptography_when_saltString_not_same()[pri:0, instance:my.utils.CryptographyUtilsTest@3d24753a]" name="testCryptography_when_saltString_not_same" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCryptography_when_saltString_not_same -->
      </class> <!-- my.utils.CryptographyUtilsTest -->
      <class name="my.utils.JsonUtilsTest">
        <test-method status="PASS" signature="test_deserialize()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize" duration-ms="159" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize -->
        <test-method status="PASS" signature="test_deserialize_invalidJson()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize_invalidJson" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Failed to deserialize json]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Failed to deserialize json
	at my.utils.JsonUtils.deserialize(JsonUtils.java:85)
	at my.utils.JsonUtilsTest.test_deserialize_invalidJson(JsonUtilsTest.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 21 path $.name
	at com.google.gson.Gson.fromJson(Gson.java:902)
	at com.google.gson.Gson.fromJson(Gson.java:852)
	at com.google.gson.Gson.fromJson(Gson.java:801)
	at com.google.gson.Gson.fromJson(Gson.java:773)
	at my.utils.JsonUtils.deserialize(JsonUtils.java:82)
	... 35 more
Caused by: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 21 path $.name
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1559)
	at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:491)
	at com.google.gson.stream.JsonReader.hasNext(JsonReader.java:414)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:214)
	at com.google.gson.Gson.fromJson(Gson.java:887)
	... 39 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize_invalidJson -->
        <test-method status="PASS" signature="test_deserialize_list()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize_list" duration-ms="39" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize_list -->
        <test-method status="PASS" signature="test_deserialize_invalidJson_withDefaultValue()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize_invalidJson_withDefaultValue" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize_invalidJson_withDefaultValue -->
        <test-method status="PASS" signature="test_deserialize_nestedObject()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize_nestedObject" duration-ms="1" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize_nestedObject -->
        <test-method status="PASS" signature="test_serialize()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_serialize" duration-ms="2" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_serialize -->
        <test-method status="PASS" signature="test_deserialize_strict()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_deserialize_strict" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_deserialize_strict -->
        <test-method status="PASS" signature="test_serialize_list()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_serialize_list" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_serialize_list -->
        <test-method status="PASS" signature="test_serialize_nestedObject()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_serialize_nestedObject" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_serialize_nestedObject -->
        <test-method status="PASS" signature="test_serialize_multivaluedMap()[pri:0, instance:my.utils.JsonUtilsTest@71be98f5]" name="test_serialize_multivaluedMap" duration-ms="0" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_serialize_multivaluedMap -->
      </class> <!-- my.utils.JsonUtilsTest -->
      <class name="my.utils.XmlUtilsTest">
        <test-method status="PASS" signature="test_getElementXml()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getElementXml" duration-ms="60" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getElementXml -->
        <test-method status="PASS" signature="test_getElementXml_withoutNamespace()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getElementXml_withoutNamespace" duration-ms="5" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getElementXml_withoutNamespace -->
        <test-method status="PASS" signature="test_getFirstChildElement()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getFirstChildElement" duration-ms="6" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getFirstChildElement -->
        <test-method status="PASS" signature="test_getNamespace()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getNamespace" duration-ms="3" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getNamespace -->
        <test-method status="PASS" signature="test_getNode()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getNode" duration-ms="4" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getNode -->
        <test-method status="PASS" signature="test_getNode_withoutNamespace()[pri:0, instance:my.utils.XmlUtilsTest@17f6480]" name="test_getNode_withoutNamespace" duration-ms="4" started-at="2017-01-28T20:30:16Z" finished-at="2017-01-28T20:30:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_getNode_withoutNamespace -->
      </class> <!-- my.utils.XmlUtilsTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
